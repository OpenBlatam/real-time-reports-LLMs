name: CLI Testing

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: blacksmith-32vcpu-ubuntu-2204 # Using a powerful runner as requested
    environment: testing

    # Service containers
    services:
      # Redis needed by API
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Build API Docker Image with Blacksmith Caching ---
      - name: Build and Load API Docker Image
        uses: useblacksmith/build-push-action@v1
        with:
          context: ./api
          file: ./api/Dockerfile
          push: false # Do not push, load locally for service container
          load: true  # Load the image into the runner's Docker daemon
          tags: local-api-test:latest # Tag for the service definition

      # --- Setup Supabase Environment on Host ---
      - name: Setup Test Environment # Runs Supabase, migrations, seeding on host
        uses: ./.github/actions/setup-test-environment

      # --- Start API Container Manually ---
      - name: Start API Container
        run: |
          docker run -d --name local-api -p 3001:3001 \
            --network=host \
            -e DATABASE_URL='postgres://postgres:postgres@127.0.0.1:54322/postgres' \
            -e POOLER_URL='postgres://postgres:postgres@127.0.0.1:54322/postgres' \
            -e REDIS_URL='redis://127.0.0.1:6379' \
            -e JWT_SECRET='super-secret-jwt-token-with-at-least-32-characters-long' \
            -e SUPABASE_URL='http://127.0.0.1:54321' \
            -e SUPABASE_SERVICE_ROLE_KEY='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MjM0MzA5Nn0.EGgMpd9zvvHPCOq4DJRLwzJ1iS3GV4AEyzguXGcbEIY' \
            -e ENVIRONMENT='development' \
            -e LOG_LEVEL='debug' \
            -e PORT='3001' \
            -e RUST_LOG='debug' \
            -e OPENAI_API_KEY='${{ secrets.GH_ACTIONS_OPENAI_API_KEY }}' \
            -e RESEND_API_KEY='${{ secrets.GH_ACTIONS_RESEND_API_KEY }}' \
            -e COHERE_API_KEY='${{ secrets.GH_ACTIONS_COHERE_API_KEY }}' \
            -e LLM_API_KEY='${{ secrets.GH_ACTIONS_LLM_API_KEY }}' \
            -e LLM_BASE_URL='${{ secrets.GH_ACTIONS_LLM_BASE_URL }}' \
            local-api-test:latest

      - name: Wait for API Health Check
        run: |
          echo "Waiting for API to be healthy..."
          for i in {1..30}; do # Wait up to 30 seconds
            if curl -f http://localhost:3001/health; then
              echo "API is healthy!"
              exit 0
            fi
            sleep 1
          done
          echo "API did not become healthy in time."
          exit 1

      - name: Run CLI Tests
        working-directory: ./cli # Tests run from the cli directory
        run: cargo test --workspace # Run tests for all packages in the cli workspace
        env:
          RUST_TEST_THREADS: 24
          # Point to services on host (DB/Supabase/Redis) and API container
          DATABASE_URL: postgres://postgres:postgres@127.0.0.1:54322/postgres
          REDIS_URL: redis://localhost:6379 # Tests run on host, connect to exposed Redis port
          JWT_SECRET: 'super-secret-jwt-token-with-at-least-32-characters-long' # Use default local value
          SUPABASE_URL: http://127.0.0.1:54321 # Tests run on host
          SUPABASE_SERVICE_ROLE_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MjM0MzA5Nn0.EGgMpd9zvvHPCOq4DJRLwzJ1iS3GV4AEyzguXGcbEIY' # Use default local value
          RUST_LOG: debug # Or adjust as needed
          BUSTER_API_URL: http://localhost:3001 # Point CLI tests to the manually started API container

          # Secrets are passed to the API container, not needed directly by CLI tests

      - name: Stop Supabase # Use the cleanup action
        uses: ./.github/actions/stop-supabase
        if: always() # Ensure Supabase is stopped even if tests fail

      - name: Stop API Container # Cleanup manually started container
        if: always()
        run: docker stop local-api && docker rm local-api
